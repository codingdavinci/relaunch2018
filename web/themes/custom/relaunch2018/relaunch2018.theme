<?php

use Drupal\block\Entity\Block;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements THEME_preprocess().
 *
 * @param array $variables
 */
function relaunch2018_preprocess(array &$variables) {
  $variables['theme_path'] = base_path() . $variables['directory'];
}

/**
 * Implements THEME_preprocess_HOOK().
 *
 * @param array $variables
 */
function relaunch2018_preprocess_page(array &$variables) {
  /** @var \Drupal\Core\Entity\EntityRepository $repository */
  $repository = \Drupal::service('entity.repository');

  foreach (array_keys($variables['page']['header']) as $blockId) {
    $block = Block::load($blockId);

    if ($block !== null) {
      $derivativeId = $block->getPlugin()->getDerivativeId();

      if ($derivativeId !== null) {
        /** @var Block $parentBlock */
        $parentBlock = $repository->loadEntityByUuid(
          'block_content',
          $derivativeId
        );

        if ($parentBlock->bundle() === 'extended_page_header') {
          $variables['extended_page_header'] = TRUE;
          break;
        }
      }
    }
  }
}

/**
 * Implements THEME_preprocess_HOOK().
 *
 * @param array $variables
 */
function relaunch2018_preprocess_node(array &$variables) {
  /** @var Node $node */
  $node = $variables['node'];

  if ($node->bundle() === 'project') {
    // Add award title to variables if project has won an award.
    if (($eventId = $node->get('field_event')->target_id) !== null) {
      $nid = $node->id();
      $award = null;
      /** @var Node $event */
      $event = Node::load($eventId);

      foreach ($event->get('field_winners')->getValue() as $element) {
        $winner = Paragraph::load($element['target_id']);

        if ($winner->get('field_project')->target_id === $nid) {
          $award = $winner->get('field_award')->value;
          break;
        }
      }

      $variables['award'] = $award;
    }
  }
}

/**
 * Implements THEME_preprocess_HOOK().
 *
 * @param array $variables
 */
function relaunch2018_preprocess_field(array &$variables) {
  $uuid_service = \Drupal::service('uuid');
  $variables['uuid'] = $uuid_service->generate();
}

/**
 * Implements THEME_suggestions_HOOK_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function relaunch2018_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $derivativeId = $variables['elements']['#derivative_plugin_id'];

  if ($derivativeId !== null) {
    /** @var \Drupal\Core\Entity\EntityRepository $repository */
    $repository = \Drupal::service('entity.repository');

    /** @var Block $parentBlock */
    $parentBlock = $repository->loadEntityByUuid('block_content', $derivativeId);

    if ($parentBlock !== null) {
      array_splice(
        $suggestions,
        count($suggestions) - 2,
        0,
        'block__block_content__' . str_replace('-', '_', $parentBlock->bundle())
      );
    }
  }
}

/**
 * Implements THEME_suggestions_HOOK_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function relaunch2018_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'field__'
    . $variables['element']['#entity_type'] . '__'
    . $variables['element']['#field_name'] . '__'
    . $variables['element']['#bundle'] . '__'
    . $variables['element']['#view_mode'];
}

/**
 * Implements THEME_page_attachments_alter().
 *
 * @param array $attachments
 */
function relaunch2018_page_attachments_alter(array &$attachments) {
  // Remove default shortcut icon definition, since we set more elaborate
  // definitions by overwriting html.html.twig.
  if (isset($attachments['#attached']['html_head_link'])) {
    foreach ($attachments['#attached']['html_head_link'] as $key => $config) {
      if (isset($config[0]['rel']) && $config[0]['rel'] === 'shortcut icon') {
        unset($attachments['#attached']['html_head_link'][$key]);
      }
    }
  }
}

/**
 * Implements THEME_preprocess_HOOK().
 *
 * @param array $variables
 */
function relaunch2018_preprocess_views_exposed_form__data_sets(array &$variables) {
  $secondaryFilters = [
    'license',
    'event',
    'institution',
    'search',
  ];

  $variables['show_secondary_options'] = false;

  foreach ($secondaryFilters as $filterName) {
    $value = $variables['form'][$filterName]['#value'];
    if (!($value === 'All' || $value === '' || is_array($value) && count($value) === 0)) {
      $variables['show_secondary_options'] = true;
      break;
    }
  }
}
