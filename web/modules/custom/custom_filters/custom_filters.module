<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\views\ResultRow;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function custom_filters_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-data-sets-page-1') {
    // Turn event text input into links
    $options = [];
    $events = Node::loadMultiple(
      \Drupal::entityQuery('node')->condition('type', 'event')->execute()
    );

    usort($events, function($a, $b) {
      /** @var Node $a */
      /** @var Node $b */
      return $a->get('field_range')->end_value < $b->get('field_range')->end_value;
    });

    /** @var Node $event */
    foreach ($events as $event) {
      $options[$event->get('nid')->value] = $event->get('title')->value;
    }

    // Mimic native views filter behaviour:
    $allValue = \Drupal::request()->query->get('event_id') !== null ? 'All' : '';

    $form['event_id'] = [
      '#type' => 'select',
      '#options' => [$allValue => t('- Any -')] + $options,
      '#default_value' => 'All',
      '#theme' => 'bef_links',
      '#bef_path' => Url::fromRoute('view.data_sets.page_1'),
    ];

    $form['institution'] = [
      '#type' => 'textfield',
      '#autocomplete_route_name' => 'custom_filters.autocomplete',
      '#autocomplete_route_parameters' => [
        'field_name' => 'institution',
        'count' => 10
      ],
    ];
  }
}

/**
 * Implements hook_views_post_execute().
 *
 * @param ViewExecutable $view
 */
function custom_filters_views_post_execute(ViewExecutable $view) {
  if ($view->id() === 'data_sets') {
    // Filter customisations in this module can lead to showing duplicates in the
    // result output.
    $resultWithoutDuplicates = [];
    $nodeIds = [];

    /** @var ResultRow $resultRow */
    foreach ($view->result as $resultRow) {
      if ($resultRow->_entity === null) {
        break;
      }

      /** @var Node $node */
      $node = $resultRow->_entity;

      if (!in_array($node->id(), $nodeIds)) {
        $resultWithoutDuplicates[] = $resultRow;
        $nodeIds[] = $node->id();
      }
    }

    $view->result = $resultWithoutDuplicates;
  }
}
