<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function custom_filters_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-data-sets-page-1') {
    // Turn event text input into links
    $options = [];
    $events = Node::loadMultiple(
      \Drupal::entityQuery('node')->condition('type', 'event')->execute()
    );

    usort($events, function($a, $b) {
      /** @var Node $a */
      /** @var Node $b */
      return $a->get('field_range')->end_value < $b->get('field_range')->end_value;
    });

    /** @var Node $event */
    foreach ($events as $event) {
      $options[$event->get('nid')->value] = $event->get('title')->value;
    }

    // Mimic native views filter behaviour:
    $allValue = \Drupal::request()->query->get('event_id') !== null ? 'All' : '';

    $form['event_id'] = [
      '#type' => 'select',
      '#options' => [$allValue => t('- Any -')] + $options,
      '#default_value' => 'All',
      '#theme' => 'bef_links',
      '#bef_path' => Url::fromRoute('view.data_sets.page_1'),
      // Although native $form['event_id'] text field is overwritten,
      // $form['event_id']['#value'] is never filled. Normally, this should be:
      // '#value' => $form['event_id']['#value'] === '' ? 'All' : $form['event_id']['#value']
      // Using the above line would make all specific field handling per
      // hook_views_pre_execute and hook_views_pre_view obsolete.
    ];

    $form['institution'] = [
      '#type' => 'textfield',
      '#autocomplete_route_name' => 'custom_filters.autocomplete',
      '#autocomplete_route_parameters' => [
        'field_name' => 'institution',
        'count' => 10
      ],
    ];
  }
}

/**
 * Implements hook_views_pre_execute().
 *
 * @param ViewExecutable $view
 */
function custom_filters_views_query_alter(ViewExecutable $view) {
  if ($view->id() === 'data_sets' && $view->getDisplay()->display['id'] === 'page_1') {
    /** @var \Drupal\views\Plugin\views\query\Sql $query */
    $query = &$view->query;

    // Rewrite condition of simulated event select field which won't handle
    // "AlL" string value:
    foreach ($query->where as &$conditionGroup) {
      $conditionGroup['conditions'] = array_filter(
        $conditionGroup['conditions'],
        function ($condition) {
          return
            $condition['field'] !== 'node_field_data_paragraph__field_event.nid'
            || $condition['value'] !== 'All';
        }
      );
    }
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * @param ViewExecutable $view
 * @param string $display_id
 * @param array $args
 */
function custom_filters_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() === 'data_sets' && $view->getDisplay()->display['id'] === 'page_1') {
    $filterInput = $view->getExposedInput();
    if (isset($filterInput['event_id']) && $filterInput['event_id'] === '') {
      // Change processed value as an empty string causes an error on page
      // navigation.
      $filterInput['event_id'] = 'All';
      $view->setExposedInput($filterInput);
    }
  }
}

/**
 * Implements hook_views_post_build().
 *
 * @param ViewExecutable $view
 */
function custom_filters_views_post_build(ViewExecutable $view) {
  if ($view->id() === 'data_sets' && $view->getDisplay()->display['id'] === 'page_1') {
    // Remove duplicates originating from View relationships which are always
    // aggregated using LEFT JOIN.
    $select = Database::getConnection()->select('node');
    $select->innerJoin($view->build_info['query'], 'subQuery');
    $select->fields('subQuery', [
      'nid',
      'node_field_data_sticky',
      'node_field_data_created',
    ]);
    $select->distinct();
    $select->orderBy('node_field_data_sticky', 'DESC');
    $select->orderBy('node_field_data_created', 'DESC');
    $view->build_info['query'] = $select;
    $view->build_info['count_query'] = $select;
  }
}
