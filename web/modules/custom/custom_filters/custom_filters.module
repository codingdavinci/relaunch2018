<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Database\Query\Condition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\ViewExecutable;

/**
 * Form and display ids keyed by view id.
 * @type string[][]
 */
const CUSTOM_FILTERS_VIEW_IDS = [
  'data_sets' => ['page_1', 'page_2', 'data_export_1'],
  'projects' => ['page_1', 'page_2', 'data_export_1', 'block_3'],
];

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function custom_filters_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($currentViewInfo = _custom_filters_check_form($form)) {

    // Turn event text input into links
    $options = [];
    $events = Node::loadMultiple(
      \Drupal::entityQuery('node')->condition('type', 'event')->execute()
    );

    usort($events, function($a, $b) {
      /** @var Node $a */
      /** @var Node $b */
      return $a->get('field_range')->end_value < $b->get('field_range')->end_value;
    });

    /** @var Node $event */
    foreach ($events as $event) {
      $options[$event->get('nid')->value] = $event->get('title')->value;
    }

    if (
      $currentViewInfo['view'] === 'data_sets'
      && $currentViewInfo['display'] === 'page_1'
    ) {
      $form['institution'] = [
        '#type' => 'textfield',
        '#autocomplete_route_name' => 'custom_filters.autocomplete',
        '#autocomplete_route_parameters' => [
          'field_name' => 'institution',
          'count' => 10
        ],
      ];
    }
  }
}

/**
 * Implements hook_views_post_build().
 *
 * @param ViewExecutable $view
 */
function custom_filters_views_post_build(ViewExecutable $view) {
  if ($currentViewInfo = _custom_filters_check_display($view)) {
    if ($currentViewInfo['display'] === 'data_export_1') {
      // While export preview features only a reduced set of fields that do not
      // allow spotting duplicates, don't remove duplicates in actual export.
      return;
    }

    if ($view->id() === 'projects' && (
      $currentViewInfo['display'] === 'page_1'
      || $currentViewInfo['display'] === 'block_3'
    )) {
      /** @var \Drupal\Core\Database\Query\Select $originalSelect */
      $originalSelect = $view->build_info['query'];

      // Arrange ordering by awarded projects by limiting the JOIN with the
      // projects awarded to the row's actual project. That results in only
      // awarded projects being matched on the JOIN.
      $tables =& $originalSelect->getTables();
      $tables['node_field_data_paragraph__field_project']['condition']
        .= ' AND node_field_data.nid = node_field_data_paragraph__field_project.nid';

      $orderBy =& $originalSelect->getOrderBy();
      $newOrderBy = [];

      // Leave order of ORDER BY intact and insert winner sorting after event
      // sorting.
      $i = 0;
      foreach ($orderBy as $column => $direction) {
        if (
          $i === 0 && $currentViewInfo['display'] === 'block_3'
          || $i === 1 && $currentViewInfo['display'] === 'page_1'
        ) {
          $newOrderBy['node_field_data_paragraph__field_project_nid'] = 'DESC';
        }
        $newOrderBy[$column] = $direction;
        $i++;
      }

      $orderBy = $newOrderBy;
    }

    // Remove duplicates originating from View relationships which are always
    // aggregated using LEFT JOIN.
    $select = Database::getConnection()->select('node');
    $select->innerJoin($view->build_info['query'], 'subQuery');
    $select->fields('subQuery', ['nid']);
    $select->distinct();

    $view->build_info['query'] = $select;
    $view->build_info['count_query'] = $select;
  }
}

/**
 * Implements hook_views_query_alter().
 */
function custom_filters_views_query_alter(ViewExecutable $view, Sql $query) {

  if ($view->id() === 'data_sets' && $view->getDisplay()->display['id'] === 'page_1') {
    // The license filter is set up to only allow selecting license groups. In
    // order to select the data sets by their actual license, the applied filter
    // needs to be rewritten to filter for the taxonomy term children.

    /** @var \Drupal\taxonomy\TermStorage $storage */
    $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

    $childrenTermIds = [];

    foreach ($query->where as &$conditionGroup) {
      foreach ($conditionGroup['conditions'] as &$condition) {
        $condition = &$condition['field'];

        if ($condition instanceof Condition) {
          $fieldConditions = &$condition->conditions();

          foreach ($fieldConditions as $i => &$fieldCondition) {
            if (!is_int($i)) {
              continue;
            }

            $fieldName = 'paragraph__field_license_value_' . $i . '.field_license_target_id';

            if ($fieldCondition['field'] === $fieldName) {
              $childrenTermIds[$i] = array_map(function($term) {
                /** @var \Drupal\taxonomy\Entity\Term $term */
                return $term->id();
              }, $storage->loadChildren($fieldCondition['value'], 'licenses'));
              $fieldCondition['value'] = $childrenTermIds[$i];
              $fieldCondition['operator'] = 'IN';
            }
          }
        }
      }
    }

    foreach ($childrenTermIds as $i => $childrenTermIdsPerGroup) {
      /** @var Sql $query */
      $table = $query->getTableInfo('paragraph__field_license_value_' . $i);
      $table['join']->extra[0]['value'] = $childrenTermIdsPerGroup;
    }
  }
}

/**
 * @param array $form
 * @return string[]|FALSE
 */
function _custom_filters_check_form($form) {
  foreach (CUSTOM_FILTERS_VIEW_IDS as $viewId => $displayIds) {
    foreach ($displayIds as $displayId) {
      $formId = 'views-exposed-form-'
        . str_replace('_', '-', $viewId) . '-'
        . str_replace('_', '-', $displayId);
      if ($formId === $form['#id']) {
        return ['view' => $viewId, 'display' => $displayId];
      }
    }
  }
  return FALSE;
}

/**
 * @param ViewExecutable $view
 * @return string[]|FALSE
 */
function _custom_filters_check_display(ViewExecutable $view) {
  foreach (CUSTOM_FILTERS_VIEW_IDS as $viewId => $displayIds) {
    if ($viewId !== $view->id()) {
      continue;
    }
    foreach ($displayIds as $displayId) {
      if ($view->getDisplay()->display['id'] === $displayId) {
        return ['view' => $viewId, 'display' => $displayId];
      }
    }
  }
  return FALSE;
}
