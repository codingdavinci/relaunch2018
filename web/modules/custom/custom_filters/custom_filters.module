<?php

use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;

/**
 * Form and display ids keyed by view id.
 * @type string[][]
 */
const CUSTOM_FILTERS_VIEW_IDS = [
  'data_sets' => [
    'form' => 'views-exposed-form-data-sets-page-1',
    'display' => 'page_1',
  ],
  'projects' => [
    'form' => 'views-exposed-form-projects-page-1',
    'display' => 'page_1',
  ]
];

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function custom_filters_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($currentViewId = _custom_filters_check_form($form)) {

    // Turn event text input into links
    $options = [];
    $events = Node::loadMultiple(
      \Drupal::entityQuery('node')->condition('type', 'event')->execute()
    );

    usort($events, function($a, $b) {
      /** @var Node $a */
      /** @var Node $b */
      return $a->get('field_range')->end_value < $b->get('field_range')->end_value;
    });

    /** @var Node $event */
    foreach ($events as $event) {
      $options[$event->get('nid')->value] = $event->get('title')->value;
    }

    // Mimic native views filter behaviour:
    $allValue = \Drupal::request()->query->get('event_id') !== null ? 'All' : '';

    $form['event_id'] = [
      '#type' => 'select',
      '#options' => [$allValue => t('- Any -')] + $options,
      '#default_value' => 'All',
      '#theme' => 'bef_links',
      '#bef_path' => Url::fromRoute(
        'view.' . $currentViewId . '.' . CUSTOM_FILTERS_VIEW_IDS[$currentViewId]['display']
      ),
      // Although native $form['event_id'] text field is overwritten,
      // $form['event_id']['#value'] is never filled. Normally, this should be:
      // '#value' => $form['event_id']['#value'] === '' ? 'All' : $form['event_id']['#value']
      // Using the above line would make all specific field handling per
      // hook_views_pre_execute and hook_views_pre_view obsolete.
    ];

    if ($currentViewId === 'data_sets') {
      $form['institution'] = [
        '#type' => 'textfield',
        '#autocomplete_route_name' => 'custom_filters.autocomplete',
        '#autocomplete_route_parameters' => [
          'field_name' => 'institution',
          'count' => 10
        ],
      ];
    }
  }
}

/**
 * Implements hook_views_pre_execute().
 *
 * @param ViewExecutable $view
 */
function custom_filters_views_query_alter(ViewExecutable $view) {
  if (_custom_filters_check_display($view)) {
    /** @var \Drupal\views\Plugin\views\query\Sql $query */
    $query = &$view->query;

    // Rewrite condition of simulated event select field which won't handle
    // "AlL" string value:
    foreach ($query->where as &$conditionGroup) {
      $conditionGroup['conditions'] = array_filter(
        $conditionGroup['conditions'],
        function ($condition) {
          return
            $condition['field'] !== 'node_field_data_paragraph__field_event.nid'
            || $condition['value'] !== 'All';
        }
      );
    }
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * @param ViewExecutable $view
 * @param string $display_id
 * @param array $args
 */
function custom_filters_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if (_custom_filters_check_display($view)) {
    $filterInput = $view->getExposedInput();
    if (isset($filterInput['event_id']) && $filterInput['event_id'] === '') {
      // Change processed value as an empty string causes an error on page
      // navigation.
      $filterInput['event_id'] = 'All';
      $view->setExposedInput($filterInput);
    }
  }
}

/**
 * Implements hook_views_post_build().
 *
 * @param ViewExecutable $view
 */
function custom_filters_views_post_build(ViewExecutable $view) {
  if (_custom_filters_check_display($view)) {
    // Remove duplicates originating from View relationships which are always
    // aggregated using LEFT JOIN.
    $select = Database::getConnection()->select('node');
    $select->innerJoin($view->build_info['query'], 'subQuery');
    $select->fields('subQuery', ['nid']);
    $select->distinct();

    /** @var \Drupal\Core\Database\Query\Select $originalSelect */
    $originalSelect = $view->build_info['query'];
    $originalFields = $originalSelect->getFields();

    // Port original SORT BY to new SELECT:
    foreach ($originalSelect->getOrderBy() as $field => $direction) {
      $select->orderBy($field, $direction);
      $originalField = $originalFields[$field];
      $select->addField(
        'subQuery',
        $originalField['alias'],
        $originalField['alias']
      );
    }

    $view->build_info['query'] = $select;
    $view->build_info['count_query'] = $select;
  }
}

/**
 * @param array $form
 * @return string|FALSE
 */
function _custom_filters_check_form($form) {
  foreach (CUSTOM_FILTERS_VIEW_IDS as $viewId => $ids) {
    if ($ids['form'] === $form['#id']) {
      return $viewId;
    }
  }
  return FALSE;
}

/**
 * @param ViewExecutable $view
 * @return string|FALSE
 */
function _custom_filters_check_display(ViewExecutable $view) {
  foreach (CUSTOM_FILTERS_VIEW_IDS as $viewId => $ids) {
    if (
      $viewId === $view->id()
      && $view->getDisplay()->display['id'] === $ids['display']
    ) {
      return $viewId;
    }
  }
  return FALSE;
}
