/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($) {
  $(function () {
    var $checkboxes = $('.form-checkboxes');

    $checkboxes.each(function () {
      var $this = $(this);
      insertHierarchyIntoHtml($this);
      addClickBehaviour($this);
    });
  });

  function insertHierarchyIntoHtml($checkboxes) {
    var $items = $checkboxes.children();
    var currentLevel = 0;
    var currentLevelChecked = false;
    var html = '';

    $items.each(function () {
      var $item = $(this);
      var level = getLevel($(this));
      var $label = $item.find('label');
      $label.text($label.text().replace(/^-*/g, ''));

      if (level > currentLevel) {
        html += '<div class="hierarchy hierarchy-level-' + level + (currentLevelChecked ? ' hierarchy-level-visible' : '') + '">';
      } else if (level < currentLevel) {
        html += '</div>';
      }

      html += this.outerHTML;

      currentLevel = level;
      currentLevelChecked = $item.find('input').prop('checked');
    });

    $items.remove();
    $checkboxes.html(html);
  }

  function getLevel($item) {
    return ($item.find('label').text().match(/^-*/g) || [])[0].length;
  }

  function addClickBehaviour($checkboxes) {
    var $items = $checkboxes.find('div.form-item');

    $items.on('click', function (e) {
      var $item = $(e.target).closest('div.form-item');
      var $next = $item.next();

      if ($next.hasClass('hierarchy')) {
        $next.stop(true);
        $next[$item.find('input').prop('checked') ? 'slideDown' : 'slideUp']({
          easing: 'easeInOutCirc'
        }).promise().done(function () {
          if (!$next.is(':visible')) {
            $next.find('input').prop('checked', false);
          }
        });
      }
    });
  }
})(jQuery);