<?php

use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param array $variables
 */
function form_alterations_preprocess_file_upload_help(array &$variables) {
  // Remove unneeded explanations
  // - number of files:
  unset($variables['descriptions'][0]);
  // - maximum file size:
  unset($variables['descriptions'][1]);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @param array $element
 * @param FormStateInterface $form_state
 * @param array $context
 */
function form_alterations_field_widget_options_select_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  if (
    isset($context['form']['#entity_type'])
    && $context['form']['#entity_type'] === 'paragraph'
  ) {
    $element['#options']['_none'] = t('- Select -');
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function form_alterations_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_data_set_form', 'node_data_set_edit_form'])) {
    _form_alterations_data_set($form);
  }
  elseif (in_array($form_id, ['node_project_form', 'node_project_edit_form'])) {
    _form_alterations_project($form);
  }
}

/**
 * @param array $form
 */
function _form_alterations_data_set(array &$form) {
  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  $form['#attached']['library'][] = 'form_alterations/checkbox-hierarchy';
  $form['#attached']['library'][] = 'form_alterations/multistep';

  if (count(array_intersect(['administrator', 'event_team', 'office'], $currentRoles)) === 0) {
    $form['moderation_state']['#access'] = FALSE;
    $form['#attached']['library'][] = 'form_alterations/styles';
  }

  unset($form['field_media_filesize']['widget'][0]['subform']['field_unit']['widget']['#options']['_none']);
  unset($form['field_metadata_filesize']['widget'][0]['subform']['field_unit']['widget']['#options']['_none']);

  $linkFieldNames = [
    'field_metadata_doc_links',
    'field_links_api',
    'field_links_media',
    'field_links_metadata',
  ];

  foreach ($linkFieldNames as $linkFieldName) {
    $form[$linkFieldName]['widget']['add_more']['#value'] = t('Add another link');
  }

  $form['langcode']['widget'][0]['value']['#title'] = t('Language of this data set description');
}

/**
 * @param array $form
 */
function _form_alterations_project(array &$form) {
  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  if (count(array_intersect(['administrator', 'event_team', 'office'], $currentRoles)) === 0) {
    $form['moderation_state']['#access'] = FALSE;
    $form['#attached']['library'][] = 'form_alterations/styles';
  }

  $linkFieldNames = [
    'field_links',
    'field_other_datasets',
    'field_links_team',
  ];

  foreach ($linkFieldNames as $linkFieldName) {
    $form[$linkFieldName]['widget']['add_more']['#value'] = t('Add another link');
  }

  $form['langcode']['widget'][0]['value']['#title'] = t('Language of this project description');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function form_alterations_form_user_form_alter(array &$form, FormStateInterface $form_state, $form_id) {

  /** @var \Drupal\user\ProfileForm $profileForm */
  $profileForm = $form_state->getFormObject();

  /** @var \Drupal\user\Entity\User $user */
  $user = $profileForm->getEntity();

  if (count(array_intersect(['institution'], $user->getRoles())) === 0) {
    // Hide institution-specific user profile form element, if that profile is
    // not a institution profile.
    $form['#attached']['library'][] = 'form_alterations/user-profile-not-institution';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function form_alterations_form_user_register_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Always hide institution-specific user profile form element when creating
  // a new user.
  $form['#attached']['library'][] = 'form_alterations/user-profile-not-institution';
}

/**
 * Implements hook_entity_form_display_alter().
 *
 * @param EntityFormDisplayInterface $form_display
 * @param array $context
 */
function form_alterations_entity_form_display_alter(EntityFormDisplayInterface &$form_display, array $context) {
  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  // Unfortunately, $context does not contain info that would allow retrieving
  // the roles of the user whose profile form is being rendered.
  // Consequently, the form mode is altered according to the user VIEWING the
  // form keeping in mind that user managers shall always be able to access all
  // fields. However, fields that do not apply to a particular user role are
  // hidden using CSS per form_alterations_form_user_form_alter.
  if (
    count(array_intersect(['administrator', 'event_team', 'office', 'institution'], $currentRoles)) > 0
    && $context['entity_type'] && $context['bundle'] === 'user'
  ) {
    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
    $institutionFormMode = $storage->load('user.user.institution');
    if ($institutionFormMode !== null) {
      $form_display = $institutionFormMode;
    }
  }
}
