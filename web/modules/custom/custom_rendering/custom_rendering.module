<?php

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param array $variables
 */
function custom_rendering_preprocess_node(array &$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];

  if ($node->bundle() === 'data_set' && $variables['view_mode'] === 'teaser') {
    // Add institution name to template variables
    /** @var \Drupal\user\Entity\User $user */
    $user = $node->getOwner();
    $variables['institution_name'] = $user->get('field_institution_name')->value;

    // For object type, show top-level taxonomy terms only
    /** @var \Drupal\taxonomy\TermStorage $storage */
    $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    $terms = $storage->loadTree('object_types', 0, 1);
    $termIds = array_map(function($term) {
      return $term->tid;
    }, $terms);

    // Get filtered values:
    $filteredValues = array_filter(
      $variables['content']['field_object_type'],
      function ($v, $k) use ($termIds) {
        if (!is_int($k)) {
          return FALSE;
        }
        return in_array(explode(':', $v['#cache']['tags'][0])[1], $termIds);
      },
      ARRAY_FILTER_USE_BOTH
    );

    // Filter out all values from render array:
    $variables['content']['field_object_type'] = array_filter(
      $variables['content']['field_object_type'],
      function ($k) {
        return !is_int($k);
      },
      ARRAY_FILTER_USE_KEY
    );

    // Reinsert filtered values with proper numeric keys:
    $variables['content']['field_object_type'] += array_values($filteredValues);
  }
  elseif ($node->bundle() === 'data_set' && $variables['view_mode'] === 'full') {

    // Don't show top-level terms on file types
    $tree = _custom_rendering_taxonomy_get_nested_tree('file_types', null, 0);
    $termIds = array_keys($tree);

    // Get filtered values:
    $filteredValues = array_filter(
      $variables['content']['field_file_types'],
      function ($v, $k) use ($termIds) {
        if (!is_int($k)) {
          return FALSE;
        }
        return !in_array(explode(':', $v['#cache']['tags'][0])[1], $termIds);
      },
      ARRAY_FILTER_USE_BOTH
    );

    // Filter out all values from render array:
    $variables['content']['field_file_types'] = array_filter(
      $variables['content']['field_file_types'],
      function ($k) {
        return !is_int($k);
      },
      ARRAY_FILTER_USE_KEY
    );

    // Reinsert filtered values with proper numeric keys:
    $variables['content']['field_file_types'] += array_values($filteredValues);

    // Render object type terms hierarchically
    $termIds = [];

    foreach ($variables['content']['field_object_type'] as $key => $value) {
      if (is_int($key)) {
        $termIds[] = $value['#plain_text'];
      }
    }

    $tree = _custom_rendering_taxonomy_get_nested_tree('object_types');

    if (count($termIds) > 0) {
      $variables['object_type'] = [
        '#type' => 'fieldset',
        '#markup' => _custom_rendering_output_taxonomy_nested_tree($tree, $termIds, 'badge--object-type'),
        '#title' => $variables['content']['field_object_type']['#title'],
        '#attributes' => [
          'class' => 'object-type',
        ],
      ];
    }
  }
}

/**
 * Implements hook_field_group_pre_render_alter().
 *
 * @param array $element
 */
function custom_rendering_field_group_pre_render_alter(&$element) {
  // Hide field groups if key elements are empty. Field groups are hidden
  // automatically when they do not contain any content. However, empty
  // paragraphs will create their content wrapper regardless of paragraph fields
  // are empty or filled:
  // See https://www.drupal.org/project/paragraphs/issues/2877695

  // "group_links" is the #group_name assigned in the backend.
  if (isset($element['#group_name']) && $element['#group_name'] === 'group_links') {
    return;
  }

  if (isset($element['field_links_metadata'])) {
    if (!isset($element['field_links_metadata'][0])) {
      $element['#access'] = FALSE;
    }
  }
  elseif (isset($element['field_links_media'])) {
    if (!isset($element['field_links_media'][0])) {
      $element['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * @param array $build
 * @param EntityInterface $entity
 * @param EntityViewDisplayInterface $display
 * @param string $view_mode
 */
function custom_rendering_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() === 'data_set' && $view_mode === 'full') {
    if (isset($build['field_attributed_image'])) {
      $build['header_image'] = $build['field_attributed_image'];
      $build['header_image'][0]['#view_mode'] = 'header';
    }
  }
}

/**
 * @param string $vid
 * @param array|null $terms
 * @param int|null $max_depth
 * @param int $parent
 * @param array $parents_index
 * @param int $depth
 * @return array
 */
function _custom_rendering_taxonomy_get_nested_tree($vid, $terms = null, $max_depth = null, $parent = 0, array $parents_index = [], $depth = 0) {
  if ($terms === null) {
    /** @var \Drupal\taxonomy\TermStorage $storage */
    $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    $terms = $storage->loadTree($vid);
  }

  $return = [];

  foreach ($terms as $term) {
    foreach ($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        $return[$term->tid] = $term;
      }
      else {
        $parents_index[$term_parent][$term->tid] = $term;
      }
    }
  }

  foreach ($return as &$term) {
    if (
      isset($parents_index[$term->tid])
      && (is_null($max_depth) || $depth < $max_depth)
    ) {
      $term->children = _custom_rendering_taxonomy_get_nested_tree(
        $vid,
        $parents_index[$term->tid],
        $max_depth,
        $term->tid,
        $parents_index,
        $depth + 1
      );
    }
  }

  return $return;
}

/**
 * @param array $tree
 * @param array $filter
 * @param string $itemClass
 * @return string
 */
function _custom_rendering_output_taxonomy_nested_tree(array $tree, array $filter = [], $itemClass = '') {
  $output = '';

  if (count($tree)) {
    $output = '<ul class="taxonomy-tree">';
    foreach ($tree as $term) {
      if (!in_array($term->tid, $filter)) {
        continue;
      }
      $output .= '<li class="taxonomy-term"><span class="badge '
        . $itemClass . '">' . $term->name . '</span>';
      if (isset($term->children)) {
        $output .= _custom_rendering_output_taxonomy_nested_tree(
          $term->children,
          $filter,
          $itemClass
        );
      }
      $output .= '</li>';
    }
    $output .= '</ul>';
  }

  return $output;
}
