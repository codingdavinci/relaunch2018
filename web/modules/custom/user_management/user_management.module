<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;

const USER_MANAGEMENT_DEFAULT_ROLE_ID = 'participant';
const USER_MANAGEMENT_SELECTABLE_ROLE_IDS = ['institution', 'participant'];

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_management_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $role = \Drupal::request()->query->get('role');

  if (in_array($role, USER_MANAGEMENT_SELECTABLE_ROLE_IDS)) {
    $form['user_management__role'] = [
      '#type' => 'hidden',
      '#value' => $role,
    ];
  }

  $form['actions']['submit']['#submit'][] = '_user_management_submit';
}

/**
 * Custom submit handler for the user registration form.
 * If a role id was specified using a query parameter, the submit handler will
 * update the new user assigning the user that role, as long as that role is
 * allowed to be set automatically.
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function _user_management_submit($form, FormStateInterface &$form_state) {
  $roleId = USER_MANAGEMENT_DEFAULT_ROLE_ID;

  if ($form_state->hasValue('user_management__role')) {
    $roleId = $form_state->getValue('user_management__role');

    $roleId = in_array($roleId, USER_MANAGEMENT_SELECTABLE_ROLE_IDS)
      ? $roleId : USER_MANAGEMENT_DEFAULT_ROLE_ID;
  }

  $role = \Drupal::entityTypeManager()->getStorage('user_role')->load($roleId);

  if ($role !== null) {
    $user = User::load($form_state->getValue('uid'));
    $user->addRole($role->id());
    $user->save();
  }
}
